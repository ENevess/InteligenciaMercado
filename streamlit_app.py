
# interface/streamlit_app.py

import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from models.simulation.modelo_predicao import simular_cenario, gerar_comentario

# ‚ö†Ô∏è Precisa ser o primeiro comando
st.set_page_config(page_title="Intelig√™ncia de Mercado", layout="wide")

# Tradu√ß√µes multil√≠ngue
TEXTOS = {
    "Portugu√™s": {
        "titulo": "üìä Intelig√™ncia de Mercado",
        "menu_simulador": "üîß Simulador de Cen√°rio",
        "menu_correlacao": "üìà Mapa de Correla√ß√µes",
        "variavel_label": "üîÅ Qual vari√°vel voc√™ deseja prever?",
        "definir_variaveis": "### üì• Defina os valores simulados para as vari√°veis abaixo:",
        "analisar": "üîç Analisar cen√°rio",
        "interpretacao": "üß† Interpreta√ß√£o autom√°tica:",
        "grafico": "üìà Tend√™ncia esperada:",
        "correlacao": "üìé Correla√ß√£o com a vari√°vel prevista:",
        "erro_correlacao": "Erro ao carregar correla√ß√µes.",
        "explicacao": (
            "A matriz de correla√ß√£o mostra o grau de associa√ß√£o entre os indicadores econ√¥micos.\n\n"
            "Valores pr√≥ximos de **1** indicam correla√ß√£o positiva forte (ambos sobem juntos).\n\n"
            "Valores pr√≥ximos de **-1** indicam correla√ß√£o negativa forte (um sobe, o outro cai).\n\n"
            "Valores pr√≥ximos de **0** indicam aus√™ncia de rela√ß√£o linear significativa."
        )
    },
    "English": {
        "titulo": "üìä Market Intelligence",
        "menu_simulador": "üîß Scenario Simulator",
        "menu_correlacao": "üìà Correlation Map",
        "variavel_label": "üîÅ Which variable do you want to predict?",
        "definir_variaveis": "### üì• Set the simulated values for the variables below:",
        "analisar": "üîç Analyze scenario",
        "interpretacao": "üß† Automatic interpretation:",
        "grafico": "üìà Expected trend:",
        "correlacao": "üìé Correlation with the predicted variable:",
        "erro_correlacao": "Error loading correlation data.",
        "explicacao": (
            "The correlation matrix shows the strength of the relationship between economic indicators.\n\n"
            "Values close to **1** indicate strong positive correlation (both rise together).\n\n"
            "Values close to **-1** indicate strong negative correlation (one rises while the other falls).\n\n"
            "Values near **0** suggest little to no linear relationship."
        )
    }
}

# Idioma
idioma = st.sidebar.selectbox("üåê Idioma / Language", ["Portugu√™s", "English"])
txt = TEXTOS[idioma]

# Menu de abas
aba = st.sidebar.radio("üìå Menu", [txt["menu_simulador"], txt["menu_correlacao"], "üìå Vis√£o Geral do Projeto"])

st.title(txt["titulo"])

if aba == txt["menu_simulador"]:
    # Aba do simulador
    target = st.selectbox(txt["variavel_label"], ["EURO", "DOLAR", "SELIC", "DIESEL"])

    variaveis = ["DIESEL", "SELIC", "DOLAR", "EURO"]
    inputs = {}

    st.markdown(txt["definir_variaveis"])
    for var in variaveis:
        if var != target:
            default = 5.0 if var in ["DIESEL", "DOLAR", "EURO"] else 10.0
            step = 0.1 if var in ["DIESEL", "DOLAR", "EURO"] else 0.25
            inputs[var] = st.number_input(f"{var}", min_value=0.0, max_value=100.0, value=default, step=step)

    if st.button(txt["analisar"]):
        resultado = simular_cenario(inputs, target)
        comentario = gerar_comentario(target, resultado, idioma)

        st.subheader(txt["interpretacao"])
        st.write(comentario)

        st.subheader(txt["grafico"])
        fig, ax = plt.subplots()
        ax.plot(resultado["meses"], resultado["valores"], label=target, linewidth=2)
        ax.set_xlabel("Meses" if idioma == "Portugu√™s" else "Months")
        ax.set_ylabel(target)
        ax.set_title(f"Proje√ß√£o para {target}" if idioma == "Portugu√™s" else f"Projection for {target}")
        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

        st.subheader(txt["correlacao"])
        try:
            cor_df = pd.read_csv("models/simulation/correlacoes.csv", index_col=0)
            cor_alvo = cor_df[target].drop(target)
            for var, valor in cor_alvo.items():
                emoji = "üî•" if abs(valor) > 0.7 else "‚ö†Ô∏è" if abs(valor) > 0.4 else "üí§"
                st.write(f"- {var}: {valor:.2f} {emoji}")
        except Exception as e:
            st.error(txt["erro_correlacao"])
            st.text(str(e))

elif aba == txt["menu_correlacao"]:
    st.subheader(txt["menu_correlacao"])
    st.markdown(txt["explicacao"])

    # Carregar dados da correla√ß√£o
    arquivos = {
        "EURO": ("data/exchange_rates/eur_brl.csv", None),
        "DOLAR": ("data/exchange_rates/usd_brl.csv", None),
        "SELIC": ("data/interest_rates/selic.csv", None),
        "DIESEL": ("data/transport/diesel_anp_consolidado.csv", {"data": "DATA FINAL", "valor": "PRE√áO M√âDIO REVENDA"}),
        "PIB": ("data/macro/pib.csv", None),
        "IBC_BR": ("data/macro/ibcbr.csv", None),
        "DESEMPREGO": ("data/macro/unemployment_rate_pnadc_ipea.csv", {"data": "data", "valor": "taxa_desemprego"}),
        "CREDITO EMPRESAS": ("data/credit/credito_empresas.csv", None),
        "IPCA": ("data/macro/ipca.csv", None),
        "IGPM": ("data/macro/igpm.csv", None),
        "PROD.IND": ("data/macro/producao_industrial.csv", None)
    }

    @st.cache_data
    def carregar_dados():
        df_final = pd.DataFrame()
        for nome, (caminho, colunas) in arquivos.items():
            try:
                df = pd.read_csv(caminho, sep=";" if "diesel" in caminho else ",")
                if colunas:
                    col_data = colunas["data"]
                    col_valor = colunas["valor"]
                else:
                    col_data = [col for col in df.columns if col.lower() in ["data", "date"]][0]
                    col_valor = [col for col in df.columns if col.lower() in ["valor", "value"]][0]
                df = df.rename(columns={col_data: "DATE", col_valor: nome})
                df["DATE"] = pd.to_datetime(df["DATE"], errors="coerce")
                df = df[["DATE", nome]].dropna()
                df_final = df if df_final.empty else pd.merge(df_final, df, on="DATE", how="outer")
            except Exception as e:
                st.warning(f"Erro ao carregar {nome}: {e}")
        df_final = df_final.dropna().sort_values("DATE").set_index("DATE")
        return df_final

    df = carregar_dados()

    if df.empty:
        st.error("‚ùå Nenhum dado encontrado.")
        st.stop()

    min_date, max_date = df.index.min(), df.index.max()
    range_values = st.slider(
        "Selecione o per√≠odo de an√°lise:",
        min_value=min_date.to_pydatetime(),
        max_value=max_date.to_pydatetime(),
        value=(min_date.to_pydatetime(), max_date.to_pydatetime()),
        format="YYYY-MM"
    )

    df_periodo = df.loc[range_values[0]:range_values[1]]
    cor = df_periodo.corr()

    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(cor, annot=True, cmap="coolwarm", fmt=".2f", linewidths=.5, ax=ax)
    st.pyplot(fig)

elif aba == "üìå Vis√£o Geral do Projeto":
    st.title("üìå Vis√£o Geral do Projeto")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("‚úÖ Fontes j√° integradas e entregas realizadas")

        st.markdown("### **Fontes de Dados Integradas**")
        st.markdown("""
        - **Banco Central do Brasil (BCB)**  
          - C√¢mbio: USD/BRL e EUR/BRL  
          - Selic: Taxa de juros b√°sica  
          - Cr√©dito para empresas (SGS 20616)  
        - **IPEA / IBGE (via ipeadatapy)**  
          - Taxa de desemprego (PNAD Cont√≠nua ajustada)  
        - **ANP - Ag√™ncia Nacional do Petr√≥leo**  
          - Pre√ßo do diesel consolidado (2004‚Äì2025)  
        - **ONTL - Observat√≥rio Nacional de Transporte e Log√≠stica**  
          - Pre√ßo m√©dio do frete em R$/TKU (modal rodovi√°rio)  
        - **Investing.com**  
          - Pre√ßo do petr√≥leo Brent (via WebScraping)
        """)

        st.markdown("### **Infraestrutura j√° implementada**")
        st.markdown("""
        - Organiza√ß√£o modular por tema (exchange, macro, transport...)
        - Scripts de coleta com coment√°rios padronizados
        - Runner centralizado com log rotativo
        - Interface visual com Streamlit
        - Matriz de correla√ß√£o com explica√ß√£o bil√≠ngue
        - Modelo inicial de regress√£o linear
        """)

    with col2:
        st.subheader("üöÄ Pr√≥ximos Passos do Projeto")

        passos = [
            ("Criar aba de explora√ß√£o hist√≥rica interativa", 5, 2, "üîç Foco em analisar individualmente cada vari√°vel ao longo do tempo com filtros de per√≠odo e visualiza√ß√£o detalhada."),
            ("Substituir modelo de regress√£o linear por RandomForest/XGBoost", 5, 4, "Aumenta a robustez das previs√µes."),
            ("Adicionar novos indicadores econ√¥micos", 4, 2, "Ampliar base com produ√ß√£o, consumo, PIB, etc."),
            ("Exporta√ß√£o dos resultados para PDF e XLS", 4, 3, "Facilita envio de relat√≥rios e apresenta√ß√µes."),
            ("Criar input textual para simula√ß√£o (NLP simplificado)", 4, 4, "Simula√ß√£o via linguagem natural."),
            ("Implementar logs detalhados de execu√ß√£o no runner.py", 3, 1, "Rastreabilidade das coletas."),
            ("Criar sistema de vers√£o dos dados (carimbo de coleta)", 3, 2, "Base para auditoria."),
            ("Adicionar dashboard comparativo entre vari√°veis", 4, 3, "üìä Foco em exibir m√∫ltiplas vari√°veis no mesmo gr√°fico para facilitar compara√ß√£o e an√°lise de correla√ß√µes visuais."),
            ("Validar previs√µes com dados internos futuros (build rate real)", 5, 4, "Comprova valor preditivo."),
            ("Adicionar camada de alerta autom√°tico por indicador", 3, 3, "Notifica√ß√µes para desvios anormais."),
        ]

        for nome, impacto, complexidade, desc in passos:
            st.markdown(f"**‚Ä¢ {nome}**  \n> {desc}  \n> üî• Impacto: {'‚≠ê' * impacto}  \n> üß© Complexidade: {'‚≠ê' * complexidade}\n")
